plugins {
    id "cpp"
    id "c"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2023.4.3"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

nativeUtils {
    exportsConfigs {
        nng {
        }
		frcUserProgram{}
    }
}
/*repositories {
    }

        PrebuiltLibrary {
                headers.srcDir "nng/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("nng/libnng.a")
                }
        }*/

/*dependencies {
	implementation files('nng/libnng.a')
}*/
model {
    components {
        nng(NativeLibrarySpec) {

			//staticLibraryFile = file("nng/libnng.a")
			binaries.withType(StaticLibraryBinary) {
				staticLibraryFile = file("nng/libnng.a")
			}
			nativeUtils.useAllPlatforms(it)
			sources {
				c {
					source {
						srcDirs "lib/nng/src"
						include "**/*.c"
						exclude "**/*test.c"
						//srcDirs "nng"
						//include "**/*.a"
					}
					implicitHeaders { srcDirs "lib/nng/src" }
			//		files { }
					exportedHeaders {
						srcDirs "lib/nng/include"
						srcDirs "lib/nng/src"
					}
				}
			}
			//setStaticLibraryFile("nng/libnng.a")
            /*headerDirs << 'cpp'
            staticMatchers << '**//*.a'

            file = project.file("nng.zip")
            targetPlatforms << wpi.platforms.linux//wpi.platforms.roborio
			wpi.useLibrary(it, "nng")*/
        }
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }
			
			//wpi.cpp.deps.useLibrary(it, "nng")
            binaries.all {
                //lib library: 'nng', linkage: 'shared'
				// none of these work, gradle >:(
				// required args are -Wl,-whole-archive,--allow-multiple-definition
				//linker.args("-Wl,-export-dynamic,--whole-archive,--allow-multiple-definition")
				//linker.args("-fuse-ld=abcd")
				//linker.args.add(0, "-Wl,-export-dynamic,-whole-archive,-allow-multiple-definition")
				//cppCompiler.args.add(0, "-Wl,-export-dynamic,-whole-archive,-allow-multiple-definition")
				//linker.args("-fkeep-static-functions")
				//linker.args("-rdynamic", "-Wl,-export-dynamic,--whole-archive,--allow-multiple-definition", "-lREVLib")
				//linker.args("-Lnng/libnng.a")
            }


            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)

        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }
            binaries.all {
                lib library: 'nng', linkage: 'shared'
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}
